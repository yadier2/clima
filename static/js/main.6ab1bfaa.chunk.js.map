{"version":3,"sources":["hooks/useGeoLocation.js","components/Navbar.js","components/InfoClima.js","components/HourConditon.js","components/WeekConditions.js","App.js","index.js"],"names":["useGeoLocation","useState","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","useEffect","navigator","code","message","geolocation","getCurrentPosition","Navbar","getLocation","handleGeolocate","medidasTiempo","className","style","backgroundColor","href","type","id","ciudad","temperature","onClick","onSubmit","name","placeholder","border","background","outline","borderRadius","InfoClima","props","src","icon","width","alt","summary","humidity","wind","pressure","icon2","summary2","HourConditon","weatherHour","map","temp","parseFloat","toFixed","hourTime","time","Date","getHours","length","data","labels","datasets","fill","label","height","options","maintainAspectRatio","animations","tension","duration","easing","from","to","loop","scales","yAxes","beginAtZero","plugins","legend","display","WeekConditions","weatherWeek","day","unix","format","temperatureMin","windSpeed","initialLocation","localStorage","getItem","JSON","parse","App","setMedidasTiempo","city","setCity","setWeatherHour","setweatherWeek","weatherForecast","setWeatherForecast","gpsLocate","a","url","fetch","res","json","console","log","currently","dewPoint","hourly","daily","getClima","e","preventDefault","target","elements","cityValue","value","features","alert","center","place_name","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ab1bfaa.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst useGeoLocation = () => {\r\n  const [location, setLocation] = useState({\r\n    loaded: false,\r\n    coordinates: { lat: \"\", lng: \"\" },\r\n  });\r\n  const onSuccess = (location) => {\r\n    setLocation({\r\n      loaded: true,\r\n      coordinates: {\r\n        lat: location.coords.latitude,\r\n        lng: location.coords.longitude,\r\n      },\r\n    });\r\n  };\r\n  const onError = (error) => {\r\n    setLocation({\r\n      loaded: true,\r\n      error,\r\n    });\r\n  };\r\n  useEffect(() => {\r\n  \r\n    if (!(\"geolocation\" in navigator)) {\r\n      \r\n      onError({\r\n        code: 0,\r\n        message: \"Geolocation not supported\",\r\n      });\r\n    }\r\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n  }, []);\r\n\r\n  return location;\r\n};\r\n\r\nexport default useGeoLocation;\r\n","import React from 'react'\r\n\r\nexport const Navbar = ({getLocation,handleGeolocate,medidasTiempo}) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light sticky-top shadow-lg\" style={{backgroundColor: '#e3f2fd'}}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand \" href=\"/#\" >Weather</a>\r\n         \r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n        \r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"/#\" >{medidasTiempo.ciudad} {medidasTiempo.temperature} {medidasTiempo.temperature && <sup>Â°c</sup>}</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\"  href=\"/#\" >Mundo</a>\r\n              </li>\r\n             \r\n            </ul>\r\n          \r\n          </div>\r\n        \r\n        </div>\r\n        <div className=\"ps-3 location-form\">\r\n        \r\n          <div onClick={handleGeolocate} className=\"\">\r\n        <i className=\"fas fa-map-marker-alt pe-2 fs-4\"></i>\r\n          </div>\r\n\r\n\r\n        <form onSubmit={getLocation} className=\"d-flex justify-content-center align-items-center p-1 bg-white rounded-pill d-md-bg-danger form-buscar\">\r\n              <input name=\"city\" className=\"p-1 ps-3 fs-6 search\" type=\"search\"placeholder=\"Search\" aria-label=\"Search\" \r\n              style={{border:'none', background:'none', outline:'none',  borderRadius: '15px',\r\n              }}/>\r\n              <button  type='submit' className=\"p-1 border border-0 \" style={{background: 'none'}}><i className=\"fas fa-search fs-5 text-warning\"></i></button>\r\n            </form>\r\n            \r\n            </div>\r\n      </nav>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const InfoClima = (props) => {\r\n    return (\r\n        <>\r\n            <div className='col-md-7'>\r\n                {\r\n                    props.temperature ?\r\n                        <div className=\"card card-body text-white\" style={{ background: '#04709418' }}>\r\n                            <h3>\r\n                                {!props.ciudad ?\r\n                                    \"El tiempo ahora\"\r\n                                    :\r\n                                    `Tiempo en ${props.ciudad}`\r\n                                }\r\n                            </h3>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6\">\r\n                                    <img src={`https://darksky.net/images/weather-icons/${props.icon}.png`}\r\n                                        style={{ width: \"60px\" }}\r\n                                        alt=\"\" />\r\n\r\n                                    <span className=\"fs-1\">{props.temperature}<sup>Â°c</sup></span>\r\n                                    <h4 className=\"mt-3\">{props.summary}</h4>\r\n                                </div>\r\n                                <div className=\"col-md-6\">\r\n                                    <div className=\"d-flex justify-content-between p-0 m-0\">\r\n                                        <p className=\"fs-4 mb-0\">Humedad</p>\r\n                                        <p className=\"fs-4 mb-0\">{props.humidity}%</p>\r\n                                    </div>\r\n                                    <hr className=\"mt-1\" />\r\n                                    <div className=\"d-flex justify-content-between p-0 m-0\">\r\n                                        <p className=\"fs-4 mb-0\">Viento</p>\r\n                                        <p className=\"fs-4 mb-0\">{props.wind} mph</p>\r\n                                    </div>\r\n                                    <hr className=\"mt-1\" />\r\n                                    <div className=\"d-flex justify-content-between p-0 m-0\">\r\n                                        <p className=\"fs-4 mb-0\">PresiÃ³n</p>\r\n                                        <p className=\"fs-4 mb-0\">{props.pressure} mb</p>\r\n                                    </div>\r\n                                    <hr className=\"mt-1\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <h3 className=\"text-center\">Verifica tu conexion o ingresa una ciudad.</h3>\r\n\r\n                        </div>\r\n                }\r\n            </div>\r\n            {\r\n                props.temperature &&\r\n                <div className=\"col-md-5\">\r\n\r\n                    <div className=\"card mt-3\">\r\n                        <div className=\"card-body shadow-lg\" >\r\n                            <h5 className=\"card-title\">PronÃ³stico de hoy</h5>\r\n                            <hr />\r\n                            <div className=\"d-flex align-items-center\">\r\n\r\n                                <img src={`https://darksky.net/images/weather-icons/${props.icon2}.png`} width=\"70px\" alt=\"\" />\r\n                                <p className=\"card-text fs-4 ms-1\">{props.summary2}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport const HourConditon = ({ weatherHour }) => {\r\n    let temperature = weatherHour.map((temp) => parseFloat(\r\n        (((temp?.temperature - 32) * 5) / 9).toFixed(1))\r\n    )\r\n    let hourTime = weatherHour.map((time) => new Date(time.time * 1000).getHours() + \":00\")\r\n\r\n    return (\r\n        <>\r\n        { temperature.length>0 && <>\r\n            <h2 className=\"mt-4 \">Clima cada hora</h2>\r\n            <div className=\"border border-info shadow-lg \">\r\n                <Line\r\n                    data={{\r\n                        labels: hourTime,\r\n                        datasets: [\r\n                            {\r\n                                fill: true,\r\n                                label: 'temperature',\r\n                                data: temperature,\r\n                                backgroundColor: '#FFB467'\r\n                            }],\r\n                    }}\r\n                    height={250}\r\n                    /*   width={600}   */\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        animations: {\r\n                            tension: {\r\n                                duration: 2000,\r\n                                easing: 'linear',\r\n                                from: 1,\r\n                                to: 0,\r\n                                loop: true\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            yAxes: [\r\n                                {\r\n                                    beginAtZero: true,\r\n                                }\r\n                            ]\r\n                        },\r\n                        plugins: {\r\n                            legend: {\r\n                                display: false,\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n        \r\n            </div>\r\n            </>\r\n}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Moment from \"react-moment\";\r\nexport const WeekConditions = ({ weatherWeek }) => {\r\n\r\n  return (\r\n    <div>\r\n      {\r\n          weatherWeek.length>0 && <h2 className=\"mt-5 mb-3\">Clima para la prÃ³xima semana</h2>\r\n      }\r\n      <div className=\"row d-flex justify-content-around\">\r\n        {\r\n          weatherWeek?.map((day, id) => (\r\n              <div key={id} className=\"card m-2 shadow\" style={{ width: \"15rem\" }}>\r\n                <div className=\"text-center\">\r\n\r\n                <img src={`https://darksky.net/images/weather-icons/${day.icon}.png`}\r\n                 className=\"card-img-top\" alt=\"...\" \r\n                 style={{ width: \"80px\"}}/>\r\n                 </div>\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">\r\n                    <Moment unix format=\"dddd\">\r\n                      {day.time}\r\n                    </Moment> \r\n                \r\n                  </h5>\r\n                  <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item d-flex justify-content-between\"><span><i className=\"fas fa-temperature-low\"></i> Min</span> <span>{(((day.temperatureMin - 32) * 5) / 9).toFixed(1)}<sup>Â°c </sup></span></li>\r\n                    <li className=\"list-group-item d-flex justify-content-between\">\r\n                           <span><i className=\"fas fa-temperature-high\"></i> Max</span>\r\n                           <span>  {(((day.temperatureMin - 32) * 5) / 9).toFixed(1)}<sup>Â°c</sup></span>\r\n                      </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between\" >  <span><i className=\"fas fa-wind\"></i> Wind</span>\r\n                      <span>{day.windSpeed} mph</span></li>\r\n                    <li className=\"list-group-item d-flex justify-content-between\" > <span><i className=\"fas fa-tint\"></i> Humidity</span> <span>{(day.humidity * 100).toFixed()}% </span></li>\r\n                    <li className=\"list-group-item d-flex justify-content-between\" ><span><i className=\"fas fa-arrows-alt-v\"></i> Pressure</span><span>{day.pressure.toFixed()} mb</span> </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n          )\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport useGeoLocation from './hooks/useGeoLocation'\nimport { Navbar } from './components/Navbar'\nimport { InfoClima } from './components/InfoClima'\nimport { HourConditon } from './components/HourConditon'\nimport { WeekConditions } from './components/WeekConditions'\n\nconst initialLocation = () => {\n  if (localStorage.getItem(\"lastLocation\")) {\n    let savedLocation = JSON.parse(localStorage.getItem(\"lastLocation\"));\n    return (savedLocation);\n  } else {\n    return ({\n      lat: 36.115778036660316,\n      lng: -115.17280731388223,\n    });\n  }\n}\n\n\nexport const App = () => {\n  const [medidasTiempo, setMedidasTiempo] = useState(\"\")\n  const [city, setCity] = useState(initialLocation);\n  const [weatherHour, setWeatherHour] = useState([]);\n  const [weatherWeek, setweatherWeek] = useState([]);\n  const [weatherForecast, setWeatherForecast] = useState({});\n  const gpsLocate = useGeoLocation();\n\n  const handleGeolocate = () => {\n    \n    if (gpsLocate.error) {\n      alert(\"Error, Actualiza y permitenos acceder a tu ubicacion\")\n    return\n    }\n\n      setCity({\n        lat: gpsLocate.coordinates.lat,\n        lng: gpsLocate.coordinates.lng,\n        ciudad: '',\n      });\n    };\n  \n\n  let dayHour = new Date(1624972733 * 1000).getHours()\n  if (dayHour > 6 && dayHour < 18) {\n\n  }\n  useEffect(() => {\n   \n    const getClima = async () => {\n      const url = `https://corsproxybypass.herokuapp.com/https://api.darksky.net/forecast/88030114c5e47763a011a75e7a10c633/${city.lat}, ${city.lng}`\n      const res = await fetch(url)\n      const data = await res.json();\n      console.log(data);\n      setMedidasTiempo({\n        temperature: (((data.currently.temperature - 32) * 5) / 9).toFixed(1),\n        wind: data.currently.windSpeed,\n        humidity: data.currently.humidity,\n        dewPoint: data.currently.dewPoint,\n        pressure: data.currently.pressure,\n        icon: data.currently.icon,\n        summary: data.currently.summary,\n        ciudad: city.ciudad\n      })\n\n      setWeatherHour(data.hourly.data)\n      setweatherWeek(data.daily.data);\n      setWeatherForecast({\n        summary2: data.hourly.summary,\n        icon2: data.hourly.icon\n      })\n    }\n    getClima()\n  }, [city])\n\n  const getLocation = async (e) => {\n    e.preventDefault()\n    const { city } = e.target.elements\n    // console.log(city, country);\n    const cityValue = city.value;\n    if (cityValue) {\n      const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${cityValue}.json?access_token=pk.eyJ1Ijoiam9uYXRoeiIsImEiOiJja3FkYmxqeTYxMThyMnBzN3IxZzV1NjY3In0.HpVGfj3JG4CfaxCzpYLn_g`\n      const res = await fetch(url)\n      const data = await res.json();\n      console.log(data,\"sssssss\");\n      if(data.features.length<1){\n        alert(\"Ingresa una ciudad valida\")\n        return\n      }\n        setCity({\n          lat: data.features[0].center[1],\n          lng: data.features[0].center[0],\n          ciudad: data.features[0].place_name,\n        });\n      \n\n      localStorage.setItem(\n        \"lastLocation\",\n        JSON.stringify({\n          lat: data.features[0].center[1],\n          lng: data.features[0].center[0],\n          ciudad: data.features[0].place_name,\n        })\n      )\n    }\n  }\n  return (\n    <>\n      <Navbar getLocation={getLocation} handleGeolocate={handleGeolocate} medidasTiempo={medidasTiempo} />\n      <div className=\"container\">\n        <div className=\"row mt-4\" >\n          <InfoClima {...medidasTiempo} {...weatherForecast} />\n          <HourConditon weatherHour={weatherHour} />\n          <WeekConditions weatherWeek={weatherWeek} />\n        </div>\n      </div>\n    </>\n  )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}